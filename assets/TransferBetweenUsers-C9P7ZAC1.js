import{r as u,y as $,c as p,d as b,g as r,l as E,t as P,s as U,p as D,a as q,q as g,A as B,h as m,f as z,w as R,i as f,F as j}from"./index-BqQshk00.js";import{A as x}from"./AccountDropdown-C4lcHUmT.js";import{c as C,k as M,m as w,h as O,u as K,_ as I}from"./rules-Dw0mSE7w.js";import{p as Y}from"./formatters-DwE89AP2.js";const Z=C({fromAccount:w,toAccount:w.test("not-same-iban","From and To IBAN cannot be the same",function(o){return o!==this.parent.fromAccount}),amount:O,description:M().nullable()}),G={class:"mb-3"},H=["for"],J=["id"],T={__name:"TextInput",props:{id:{type:String,required:!0},label:{type:String,required:!0},modelValue:{type:String,default:""}},emits:["update:modelValue"],setup(o,{emit:n}){const s=o,v=n,i=u(s.modelValue||"");$(()=>s.modelValue,l=>{i.value=l||""});const A=()=>{const l=i.value.trim();v("update:modelValue",l)};return(l,c)=>(b(),p("div",G,[r("label",{for:o.id,class:"form-label"},P(o.label),9,H),E(r("input",{id:o.id,type:"text",class:"form-control","onUpdate:modelValue":c[0]||(c[0]=d=>i.value=d),onBlur:A,placeholder:"Enter text"},null,40,J),[[U,i.value]])]))}},L={class:"d-flex flex-row justify-content-between"},Q=["disabled"],W={class:"mt-4"},X={key:0,class:"list-group"},tt=["disabled"],et={key:1,class:"text-center text-muted mt-3"},at={__name:"TransferBetweenUsers",props:{toast:Object},setup(o){const n=o,s=q(),{handleSubmit:v,meta:i,resetForm:A,setFieldValue:l}=K({validationSchema:Z,initialValues:{fromAccount:"",toAccount:"",amount:"",description:""}}),c=u(""),d=u(""),y=u([]),N=u([]),h=u(!1),_=u(0);async function F(){h.value=!1;const e=await g.get(B.accountsByName(c.value,d.value,s.user.id),{headers:{Authorization:`Bearer ${s.token}`}});h.value=!0,e.status===200?(y.value=e.data,await S()):n.toast.setToast("Failed to fetch IBANs. Please try again.","error")}async function S(){try{const e=await g.get(B.checkingAccountsById(s.user.id),{headers:{Authorization:`Bearer ${s.token}`}});N.value=e.data}catch{n.toast.setToast("Error getting your accounts. Please try again.","error")}}function k(){return!(c.value&&d.value)}const V=v(async e=>{if(!e.fromAccount){n.toast.setToast("Please select an IBAN to transfer from.","error");return}try{const t={sourceAccount:e.fromAccount,targetAccount:e.toAccount,initiatedBy:s.user.id,amount:Y(e.amount),description:e.description||null};(await g.post(B.transactions,t,{headers:{Authorization:`Bearer ${s.token}`}})).status===201?(n.toast.setToast("Transaction created successfully!","success"),A(),_.value++):n.toast.setToast("Failed to create transaction. Please try again.","error")}catch{n.toast.setToast("An error occurred while creating the transaction.","error")}});return(e,t)=>(b(),p(j,null,[t[5]||(t[5]=r("h1",{class:"h2 text-center"},"Find IBAN",-1)),r("div",null,[r("div",L,[m(T,{id:"firstName",label:"Enter first name",modelValue:c.value,"onUpdate:modelValue":t[0]||(t[0]=a=>c.value=a)},null,8,["modelValue"]),m(T,{id:"lastName",label:"Enter last name",modelValue:d.value,"onUpdate:modelValue":t[1]||(t[1]=a=>d.value=a)},null,8,["modelValue"])]),r("button",{class:"btn btn-primary mt-3 w-100",onClick:F,disabled:k()},"Find IBAN",8,Q)]),r("div",W,[y.value.length?(b(),p("div",X,[(b(),p("form",{key:_.value,onSubmit:t[4]||(t[4]=R((...a)=>f(V)&&f(V)(...a),["prevent"])),class:"d-flex flex-column gap-2"},[m(x,{accounts:N.value,label:"Select your account:","onUpdate:selectedAccount":t[2]||(t[2]=a=>f(l)("fromAccount",a?a.iban:""))},null,8,["accounts"]),m(x,{accounts:y.value,label:"IBANs found:","onUpdate:selectedAccount":t[3]||(t[3]=a=>f(l)("toAccount",a?a.iban:"")),balanceVisible:!1},null,8,["accounts"]),m(I,{name:"amount",label:"Amount to Transfer",type:"currency"}),m(I,{name:"description",label:"Description"}),r("button",{class:"btn btn-primary",type:"submit",disabled:!f(i).valid},"Transfer",8,tt)],32))])):h.value?(b(),p("div",et," No IBANs found for the given name. ")):z("",!0)])],64))}},lt=D(at,[["__scopeId","data-v-f567ae39"]]);export{lt as F,Z as t};
